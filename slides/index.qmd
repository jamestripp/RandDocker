---
title: "R and Docker"
subtitle: "Warwick R User Group"
author: "James Tripp"

institute: Senior Research Software Engineer, IT Services (University of Warwick)
format: 
    revealjs:
        theme: [default, css/warwick.scss, css/warwick-fonts.scss]
        footer: https://jamestripp.github.io/WRUG-RandDocker/
        transition: slide
        background-transition: fade
bibliography: references.bib
---

# Plan

* Docker?
* Why?
* Tools and next steps

# Docker {background-color="#2780e3"}

## What?

::: incremental
* Download the desktop application [here](https://www.docker.com/products/docker-desktop/)
* Docker creates or downloads existing **images**
* Containers are created from images and are isolated compute environments 
:::

![](images/Docker_images.svg){fig-align="center"}

## Prebuilt images

* The R project has an [official r-base image](https://hub.docker.com/_/r-base/)
* The Rocker Project

![](images/rocker_versioned_images.png){fig-align="center"}

## Base image

To download and run the official r-base image

```{bash}
docker run --rm -ti r-base
```

. . .

::: columns 
::: {.column width="50%"}

![](images/r-base.png){fig-align="center"}

:::

::: {.column width="50%"}

1. Image downloaded

2. Container created from image

3. Terminal enters container

:::
:::

. . .

::: {.callout-note appearance="simple"}

The command line options are to remove the container on exit (-rm) and to create a command line interface with interactivity (-ti)

:::


## RStudio image

```{bash}
docker run --rm -ti -e PASSWORD=yourpassword -p 8787:8787 rocker/rstudio
```

. . .

::: columns 

::: {.column width="50%"}

![](images/rstudio_container.png)

:::

::: {.column width="50%"}

* Downloads image, creates and terminal enters container

* The container provides access to RStudio via localhost:8787

* You now have an isolated RStudio install

:::

:::

::: {.callout-note appearance="simple"}

Command line options are remove the container on exit (-rm), create a command line interface (-ti), set environment variables (-e) and set the port (-p) so that connecting via port 8787 will connect to port 8787 in the container.

:::

## Custom images

Docker images are created from dockerfiles. A sample dockerfile is below[^1].

```{text}
FROM rocker/verse:3.5.2
LABEL maintainer="o2r"
# CRAN packages skipped because they are in the base image: knitr
RUN ["install2.r", "fortunes"]
WORKDIR /payload/
CMD ["R"]
```

To build the image, go to the folder containing the dockerfile and run.

```{bash}
docker build -t jamestripp/myimage .
```

Finally, to create a container and jump into it.

```{bash}
docker run --rm -ti jamestripp/myimage
```

[^1]: Sample taken from [https://github.com/o2r-project/containerit](https://github.com/o2r-project/containerit)

## Local folder

* You can make a local folder available to the container

Bit about volumes

All your students or fellow researchers could use the same image

# Why?

## Developers

* Software developers sometime wrote code which only ran on their machine
* That could be a problem

![](images/works_on_my_machine.jpeg){fig-align="center"}

## Developers

![](images/docker_born.png)

## Developers

* Developers could build and update images
* These image are used in production
* Like containers on a ship

![](images/moby-logo.png){fig-align="center"}

## Researchers

Go through examples in research

## Researchers

Talk about advantages for research user cases

## Really?

Compare with other solutions
Mention heavy
Concerns about building images, note good practices reference
Need to understand images

# Tools and next steps

## Containers

Singularity
Podman

## R tools

Package to manage docker containeres
ContainerIt
Other packages?

## Going further

Binder
CI pipelines using virtual environments


# References
