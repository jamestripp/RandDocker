---
title: "R and Docker"
subtitle: "Warwick R User Group"
author: "James Tripp"

institute: Senior Research Software Engineer, IT Services (University of Warwick)
format: 
    revealjs:
        theme: [default, css/warwick.scss, css/warwick-fonts.scss]
        footer: https://jamestripp.github.io/WRUG-RandDocker/
        transition: slide
        background-transition: fade
bibliography: references.bib
---

# Plan

-   Why?
-   Docker?
-   Next Steps

# Why?

## Developers

-   Software developers sometimes wrote code which only ran on their machine
-   That could be a problem

. . .

![](images/works_on_my_machine.jpeg){fig-align="center"}

## Developers

![](images/docker_born.png){fig-align="center"}

## Developers

-   Developers could build and update images
-   These image are used in production
-   Like containers on a ship

![](images/moby-logo.png){fig-align="center"}

## Researchers

How does this help research?

. . .

-   Aids computational reproducibility [@boettiger2015]

. . .

-   Allows other to run code without having to install lots of dependencies [@eglen2017a]

. . .

-   Language agnostic and used widely [@pittard2020]

. . .

-   Provides the basis for technologies like the research compendium [@marwick2018], binder [@getstar] and Dev Containers [@smith2022]

## Researchers

A few points to consider:

. . .

-   Smaller images with very little software may be preferable as these are easier to maintain [@gruening2019]

. . .

-   Use trustworthy images such as Rocker images [@boettiger2017].

. . .

-   Do we need to understand how the image is configured? For instance, the rocker/r-ver_4.2.1 dockerfile is [here](https://github.com/rocker-org/rocker-versioned2/blob/master/dockerfiles/r-ver_4.2.1.Dockerfile)

. . .

-   Perhaps automagic or renv, which captures the R version and libraries, is enough

# Docker {background-color="#2780e3"}

## What?

::: incremental
-   Download the desktop application [here](https://www.docker.com/products/docker-desktop/)
-   Docker creates or downloads existing **images**
-   Containers are created from images and are isolated compute environments
-   There are other container technologies. A popular option in the HPC space is Singularity, which is now called Apptainer @kurtzer2017. Here we focus on Docker.
:::

![](images/Docker_images.svg){fig-align="center"}

## Prebuilt images

. . .

-   The R project has an [official r-base image](https://hub.docker.com/_/r-base/)

. . .

-   Images from the [Rocker Project](https://rocker-project.org/images/):

. . .

    -   rocker/r-ver - alternative to r-base
    -   rocker/rstudio - R and RStudio
    -   rocker/tidyverse- R and tidyverse packages
    -   rocker/shiny - Shiny server built in
    -   many others

## Base image

To download and run the official r-base image

```{bash}
docker run --rm -ti r-base
```

. . .

::: columns
::: {.column width="50%"}
![](images/r-base.png){fig-align="center"}
:::

::: {.column width="50%"}
1.  Image downloaded

2.  Container created from image

3.  Terminal enters container
:::
:::

. . .

::: {.callout-note appearance="simple"}
The command line options are to remove the container on exit (-rm) and to create a command line interface with interactivity (-ti)
:::

## RStudio image

```{bash}
docker run --rm -ti -e DISABLE_AUTH="true" -p 8787:8787 rocker/rstudio
```

. . .

::: columns
::: {.column width="50%"}
![](images/rstudio_container.png)
:::

::: {.column width="50%"}
-   Downloads image, creates and terminal enters container

-   The container provides access to RStudio via localhost:8787

-   You now have an isolated RStudio install
:::
:::

. . .

::: {.callout-note appearance="simple"}
Command line options are remove the container on exit (-rm), create a command line interface (-ti), set environment variables (-e) and set the port (-p) so that connecting via port 8787 will connect to port 8787 in the container.
:::

## Custom images

-   Docker images are created from dockerfiles. A sample dockerfile is below[^1].

[^1]: Sample taken from <https://github.com/o2r-project/containerit>

. . .

``` {.python code-line-numbers="1-6|1-2|3-4|5|6|1-6"}
FROM rocker/verse:3.5.2
LABEL maintainer="o2r"
# CRAN packages skipped because they are in the base image: knitr
RUN ["install2.r", "fortunes"]
WORKDIR /payload/
CMD ["R"]
```

. . .

-   To build the image, go to the folder containing the dockerfile and run.

```{bash}
docker build -t jamestripp/myimage .
```

. . .

-   Finally, to create a container and jump into it.

```{bash}
docker run --rm -ti jamestripp/myimage
```

. . .

-   You can publish images to the Docker Hub (or another registry) for others to use (see instructions [here](https://jsta.github.io/r-docker-tutorial/04-Dockerhub.html) and [here](https://docs.docker.com/docker-hub/))

## Local files

-   You can also copy files when an image is created

``` {.python code-line-numbers="1-4"}
FROM r-base
COPY . /usr/local/src/myscripts
WORKDIR /usr/local/src/myscripts
CMD ["Rscript", "myscript.R"]
```

. . .

-   Volumes are folders on your local file system which are accessible to containers

```{bash}
# MacOS and Linux
docker run --rm -ti -e DISABLE_AUTH="true" -p 8787:8787 -v  $(pwd):/home/rstudio/data rocker/rstudio
# Windows
docker run --rm -ti -e DISABLE_AUTH="true" -p 8787:8787 -v  %cd%:/home/rstudio/data rocker/rstudio
```

# Worked Example

## Aim

* Create a reproducible R Markdown document

# Next steps

-   There are R packages written to help create containers [@nüst2020b] though many of these did not work for me
-   The R Bloggers site is a useful resource and has several articles on R and docker [link](https://cse.google.com/cse?cx=005359090438081006639%3Apaz69t-s8ua&ie=UTF-8&q=docker&sa=Go&bIDiEKaSr=%5BNwX%5DavgpyM&JtlBfjh=JlitU.M3&BNXYvMTtg=m6Py%40WO3Y0u&bIDiEKaSr=%5BNwX%5DavgpyM&JtlBfjh=JlitU.M3&BNXYvMTtg=m6Py%40WO3Y0u&bIDiEKaSr=%5BNwX%5DavgpyM&JtlBfjh=JlitU.M3&BNXYvMTtg=m6Py%40WO3Y0u)
-   At UseR2022 there was a workshop on containers. The material is available via the [GitHub repo](https://github.com/rsangole/user2022-r-for-docker) and R Blogger has a [post by the author](https://www.r-bloggers.com/2022/06/user2022-best-practicesfor-shiny-apps-with-docker-and-more/)
-   This [DevOps for Data Science](https://do4ds.com/chapters/sec1/docker.html) book goes lots of rather good detail 

# Tools and next steps

## Containers

There are other container technologies.

. . .

-   Singularity, now called Apptainer, is popular in the HPC space [@kurtzer2017]

. . .

-   Podman is a RedHat product aimed at enterprises

. . .

Both provide isolated environments.

## R packages

@nÃ¼st2020a provided a survey of R packages for working with R and Docker (and is generally a good read). The packages they point to are:

-   [Stevedore](https://github.com/richfitz/stevedore) - Sends commands to Docker. Required reticulate and the Python docker module. Recieved the error 'Did not find required python module 'docker''. Issue reported and not addressed in the past year...

-   [Dockyard](https://github.com/thebioengineer/dockyard) - Aims to help you create and run a container. Last commit was 3 years ago and the example code on the github page does not work...

-   [Dockermachine](https://github.com/cboettig/dockermachine) - Last updated 5 years ago.

Package to manage docker containeres ContainerIt Other packages?

## Going further

Binder CI pipelines using virtual environments

## Overview

-   point 1
-   point 2
-   point 3

# References
